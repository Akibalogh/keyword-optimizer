// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.api.ads.adwords.keywordoptimizer.formula;

/**
 * Base implementation for the {@link Node} interface specific to this project. This is mainly
 * auto-generated by jjTree, except for the {@link #calculateScore(FormulaContext)} methods, which
 * is project-specific.
 */
public abstract class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  
  public SimpleNode(int i) {
    id = i;
  }
  
  /**
   * Calculates the score (i.e. the value) of the formula represented by this node in the syntax
   * tree. Constants such as {@link ASTIdentifier} or {@link ASTDouble} will simply return
   * their values, and composite expressions such as {@link ASTAdd} or {@link ASTMult} will
   * aggregate the values of their children.
   *  
   * @param context the context holding the values of variables that can occur in the formula
   * @return a number representing the evaluated value of the formula
   * @throws FormulaException in case of an evaluation error (such as undefined variable)
   */
  public abstract double calculateScore(FormulaContext context) throws FormulaException;

  @Override
  public void jjtOpen() {
    // Nothing to do.
  }

  @Override
  public void jjtClose() {
    // Nothing to do.
  }

  @Override
  public void jjtSetParent(Node n) {
    parent = n;
  }

  @Override
  public Node jjtGetParent() {
    return parent;
  }

  @Override
  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node[] c = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  @Override
  public Node jjtGetChild(int i) {
    return children[i];
  }

  @Override
  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) {
    this.value = value;
  }

  public Object jjtGetValue() {
    return value;
  }

  @Override
  public Object jjtAccept(FormulaParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  /** Applies the visitor to all children. **/
  public Object childrenAccept(FormulaParserVisitor visitor, Object data) {
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }

  @Override
  public String toString() {
    return FormulaParserTreeConstants.jjtNodeName[id];
  }
  
  /**
   * Returns a string representation of this object prefixed with a given string.
   */
  public String toString(String prefix) {
    return prefix + toString();
  }

  /**
   * Dumps a string representation of this node and all its children on the console.
   */
  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode) children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }
}
